#!/bin/sh
#
# CHECK FILES THAT YOU WANT TO BACKUP BEFORE RUNNING THIS SCRIPT
#
# Note: if directory doesn't exists, a new one will be created,
#       otherwise all existing file from dir will be overridden.
#

compress_types="gz/bz2/jpg/jpeg/ogg/mp[34]/mov/avi/rpm/deb/zip/"

log_dotfiles="${HOME}/.backup_dotfiles.log"
log_miscfiles="${HOME}/.backup_miscfiles.log"

home_files="${SCRIPTS}/backup/home-files.txt"
root_files="${SCRIPTS}/backup/root-files.txt"
misc_files="${SCRIPTS}/backup/misc-files.txt"

DOTFILES_OPT="--dotfiles"
MISCFILES_OPT="--miscfiles"

main()
{
   notify-send "Files backup started !!!"

   if [ "$1" = "${DOTFILES_OPT}" ] && [ -z "$2" ]; then
      backup_dotfiles "${BACKUP_DOTFILES}"
   elif [ "$1" = "${DOTFILES_OPT}" ] && [ -n "$2" ]; then
      backup_dotfiles "$2"
   elif [ "$1" = "${MISCFILES_OPT}" ] && [ -z "$2" ]; then
      echo "Please provide the location where to backup !"
      exit 1
   elif [ "$1" = "${MISCFILES_OPT}" ] && [ -n "$2" ]; then
      backup_miscfiles "$2"
   elif [ -z "$1" ] || [ "$1" != "${DOTFILES_OPT}" ] || [ "$1" != "${MISCFILES_OPT}" ]; then
      help_msg
      notify-send --urgency=CRITICAL "Files backup failed !!!"
      exit 1
   fi

   notify-send "Files backup finished !!!"
}

backup_dotfiles()
{
   remove_file "${log_dotfiles}"

   local _backup_dir="$1_$(date '+%Y_%m_%d')"

   local _dotfiles_dir="${_backup_dir}/home"
   create_dir "${_dotfiles_dir}"
   copy_files "${home_files}" "${_dotfiles_dir}" "${log_dotfiles}"

   local _rootfiles_dir="${_backup_dir}/root"
   create_dir "${rootfiles_dir}"
   copy_files "${root_files}" "${_rootfiles_dir}" "${log_dotfiles}"

   # list all pacman official repo installed pkg and print them to file
   pacman -Qqe | grep -v "$(pacman -Qqm)" > "${_backup_dir}/pacman.txt"
   # list all AUR repo installed pkg and print them to file
   pacman -Qqm > "${_backup_dir}/aur.txt"

   # install all pckg from file (PACMAN)
   # cat pacman.txt | xargs pacman -S --needed --noconfirm

   # install all pckg from file (AUR)
   # cat aur.txt | xargs yay -S --needed --noconfirm

   create_archive "${_backup_dir}"
}

backup_miscfiles()
{
   remove_file "${log_miscfiles}"
   #local backup_dir="$1_$(date '+%Y_%m_%d')"
   local _backup_dir="$1"
   create_dir "${_backup_dir}"
   copy_files "${misc_files}" "${_backup_dir}" "${log_miscfiles}"
}

create_dir(){ [ ! -d "$1" ] && mkdir -p "$1"; }

remove_file(){ [ -f "$1" ] &&  rm "$1"; }

copy_files()
{
   while read -r line; do
      [ "$(echo "${line}" | grep "^#")" ] && continue
      exe_rsync "${line}" "$2" "$3"
   done < "$1"
}

exe_rsync()
{
   rsync --verbose \
         --archive \
         --compress \
         --human-readable \
         --relative \
         --progress \
         --info=ALL \
         --skip-compress="${compress_types}" \
         --log-file="$3" \
         "$1" "$2"
}

create_archive()
{
   cd "$1"
   tar --create \
       --verbose \
       --gzip \
       --file "$1".tar.gz ./*
}

help_msg()
{
   echo "Possible commands:"
   echo "   --dotfiles = backup dotfiles(Check home-files.txt and root-files.txt)"
   echo "   --miscfiles /where/to/backup = backup misc files(Check misc-files.txt)"
   echo "   Optional backup location parm for dotfiles."
}

# ---------------------------------------------------------------------------------

main "$@"
